# .github/workflows/iac.yaml

name: Provision Infrastructure and Bootstrap GitOps

on:
  workflow_dispatch: # 수동으로 실행하기 위한 버튼

jobs:
  provision-and-configure:
    runs-on: ubuntu-latest
    
    steps:
      # 1. 코드를 체크아웃합니다.
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Terraform을 설치합니다.
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # 3. Terraform을 실행하여 인프라를 생성합니다.
      - name: Terraform Apply
        id: tf_apply # 이 단계에 ID를 부여하여 결과값을 참조할 수 있게 합니다.
        working-directory: ./clusters/terraform
        env:
          TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_path: "oci_api_key.pem"
          #TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
          TF_VAR_region: ${{ secrets.OCI_REGION }}
          TF_VAR_object_storage_endpoint: ${{ secrets.OCI_OBJECT_STORAGE_ENDPOINT }}
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > oci_api_key.pem
          chmod 600 oci_api_key.pem

          SSH_PUBLIC_KEY=$(ssh-keygen -y -f oci_api_key.pem)

          terraform init \
            -backend-config="bucket=${{ secrets.OCI_TF_BUCKET }}" \
            -backend-config="key=k0s-cluster/terraform.tfstate" \
            -backend-config="region=${{ secrets.OCI_REGION }}" \
            -backend-config="namespace=${{ secrets.OCI_TF_NAMESPACE }}"

          terraform apply -auto-approve -var="ssh_public_key=$SSH_PUBLIC_KEY"
          # Terraform의 출력값(공인 IP)을 GitHub Actions의 출력 변수로 설정합니다.
          echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

      # 4. Ansible을 GitHub Actions 실행기에 설치합니다.
      - name: Install Ansible
        run: sudo apt-get install -y ansible

      # 5. Ansible 플레이북을 실행하여 서버를 설정합니다.
      - name: Run Ansible Playbook
        working-directory: ./clusters/ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          ansible-playbook \
            -i "${{ steps.tf_apply.outputs.instance_ip }}," \
            --private-key=../terraform/oci_api_key.pem \
            --user=ubuntu \
            --extra-vars "ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ServerAliveInterval=60'" \
            playbook.yml

      # 6. (핵심) FluxCD Bootstrap 실행
      - name: Bootstrap FluxCD
        env:
          # FluxCD가 사용할 GitHub 토큰
          GITHUB_TOKEN: ${{ secrets.FLUX_GITHUB_TOKEN }}
          # SSH 접속을 위한 개인키
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # SSH 개인키를 파일로 저장하고 권한 설정
          echo "$SSH_PRIVATE_KEY" > ssh_key.pem
          chmod 600 ssh_key.pem

          # 새로 만들어진 서버에 SSH로 접속하여 kubeconfig 파일을 가져옵니다.
          ssh -i ssh_key.pem -o StrictHostKeyChecking=no ubuntu@${{ steps.tf_apply.outputs.instance_ip }} "export GITHUB_TOKEN=${{ secrets.FLUX_GITHUB_TOKEN }}; flux bootstrap github --token-auth --owner=${{ github.repository_owner }} --repository=jth0809/Personal_Project --branch=main --path=./clusters/my-cluster --personal"
