name: CI - Build and Push Changed Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        app: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1. Gradle 캐시를 복원합니다.
      #    - path를 실제 캐시 디렉토리로 수정했습니다.
      #    - key를 build.gradle/settings.gradle 파일의 해시를 사용하도록 변경하여,
      #      의존성이 변경될 때 캐시가 무효화되도록 합니다.
      - name: Cache Gradle Data
        if: ${{ matrix.app == 'backend' }}
        uses: actions/cache@v4
        with:
          path: |
            apps/backend/build-cache-home
            apps/backend/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('apps/backend/build.gradle', 'apps/backend/settings.gradle') }}-${{ hashFiles('apps/backend/src/**') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('apps/backend/build.gradle', 'apps/backend/settings.gradle') }}-


      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46

      - name: Check for changes in app path
        id: check_changes
        run: |
          if (echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "apps/${{ matrix.app }}/") || \
             (echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "packages/"); then
            echo "Changes detected in ${{ matrix.app }} or shared packages. Proceeding to build."
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in ${{ matrix.app }} or shared packages. Skipping build."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      # 👇 --- [ 핵심 수정 ] --- 👇
      # 2. 캐시를 업데이트하기 위한 사전 빌드 단계
      #    - 러너의 파일 시스템에 있는 캐시 디렉토리를 컨테이너에 마운트합니다.
      #    - 컨테이너 안에서 빌드를 실행하면, 그 결과물(업데이트된 캐시)이
      #      러너의 `apps/backend/.gradle-cache` 디렉토리에 직접 저장됩니다.
      - name: Populate Gradle Cache
        if: steps.check_changes.outputs.changed == 'true' && matrix.app == 'backend'
        run: |
          mkdir -p apps/backend/build-cache-home
          mkdir -p apps/backend/.gradle

          docker run --rm \
            -v $(pwd)/apps/backend:/app \
            -w /app \
            gradle:jdk21-ubi-minimal \
            bash -c "chmod +x ./gradlew && ./gradlew build --no-daemon -x test -g /app/build-cache-home"

      - name: Log in to GHCR
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repository name
        if: steps.check_changes.outputs.changed == 'true'
        id: string-utils
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository }}

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}
          flavor: |
            latest=false
          tags: |
            type=sha,prefix=,format=short

      # 3. 최종 이미지 빌드 및 푸시
      #    - 이제 'Populate Gradle Cache' 단계에서 업데이트된 캐시가
      #      빌드 컨텍스트('apps/backend/') 내에 존재하므로,
      #      Dockerfile의 'COPY .gradle-cache ...' 명령이 성공적으로 실행됩니다.
      - name: Build and push Docker image
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.app == 'backend' && './apps/backend' || '.' }}
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
          # Docker의 자체 빌드 캐시도 계속 활용합니다.
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ... (GitOps 업데이트 부분은 변경 없음) ...
      - name: Update Kubernetes deployment manifest
        if: steps.check_changes.outputs.changed == 'true'
        env:
          GITOPS_REPO: ${{ github.repository_owner }}/Personal_Project # 👈 설정 레포지토리 이름
          GITOPS_PAT: ${{ secrets.GITOPS_PAT }}
          IMAGE_TAG: ${{ steps.meta.outputs.version }} # metadata-action이 생성한 태그 (예: a1b2c3d)
        run: |
          # 1. 설정 레포지토리 클론
          git clone https://x-access-token:${GITOPS_PAT}@github.com/${GITOPS_REPO}.git gitops
          cd gitops

          # 2. yq 설치 (YAML 수정을 위한 강력한 도구)
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          
          # 3. 배포 파일의 이미지 태그 수정
          DEPLOYMENT_FILE="./clusters/my-cluster/apps/${{ matrix.app }}.yaml"
          Job_FILE="./clusters/my-cluster/apps/${{ matrix.app }}_job.yaml"
          NEW_IMAGE="ghcr.io/${{ github.repository_owner }}/personal_project/${{ matrix.app }}:${IMAGE_TAG}"
          yq -i "(select(.kind == \"Deployment\") | .spec.template.spec.containers[0].image) = \"${NEW_IMAGE}\"" $DEPLOYMENT_FILE
          yq -i "(select(.kind == \"Job\") | .spec.template.spec.containers[0].image) = \"${NEW_IMAGE}\"" $Job_FILE

          # 4. 변경사항 커밋 및 푸시
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add $DEPLOYMENT_FILE
          git add $Job_FILE
          git commit -m "ci: Update ${{ matrix.app }} image to tag ${IMAGE_TAG}"
          git push