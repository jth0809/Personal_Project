name: CI - Build and Push Changed Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    # GHCR에 푸시할 수 있도록 권한을 부여합니다.
    permissions:
      contents: read
      packages: write
    
    # 빌드할 앱 목록을 매트릭스로 정의합니다.
    strategy:
      matrix:
        app: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # 변경 감지를 위해 전체 git 히스토리를 가져옵니다.
        with:
          fetch-depth: 0

      # 1. 변경된 파일 목록을 가져옵니다.
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46

      # 2. 각 앱의 경로에 변경이 있었는지 확인합니다.
      - name: Check for changes in app path
        id: check_changes
        run: |
          # 현재 매트릭스의 앱 폴더(apps/${{ matrix.app }})나 공용 packages 폴더에 변경이 있는지 확인
          if (echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "apps/${{ matrix.app }}/") || \
             (echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "packages/"); then
            echo "Changes detected in ${{ matrix.app }} or shared packages. Proceeding to build."
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in ${{ matrix.app }} or shared packages. Skipping build."
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
      # 3. 변경이 있을 때만 아래 단계를 실행합니다.
      - name: Log in to GHCR
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repository name
        if: steps.check_changes.outputs.changed == 'true'
        id: string-utils
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository }}

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}
          # 👇 핵심 수정: :latest 태그를 자동으로 생성하지 않도록 설정합니다.
          flavor: |
            latest=false
          # Git 커밋 해시의 앞 7자리를 태그로 사용합니다.
          tags: |
            type=sha,prefix=,format=short

      - name: Build and push Docker image
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.app == 'backend' && './apps/backend' || '.' }}
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 👇 --- GitOps 레포지토리 자동 업데이트 단계 --- 👇
      - name: Update Kubernetes deployment manifest
        if: steps.check_changes.outputs.changed == 'true'
        env:
          GITOPS_REPO: ${{ github.repository_owner }}/Personal_Project # 👈 설정 레포지토리 이름
          GITOPS_PAT: ${{ secrets.GITOPS_PAT }}
          IMAGE_TAG: ${{ steps.meta.outputs.version }} # metadata-action이 생성한 태그 (예: a1b2c3d)
        run: |
          # 1. 설정 레포지토리 클론
          git clone https://x-access-token:${GITOPS_PAT}@github.com/${GITOPS_REPO}.git gitops
          cd gitops

          # 2. yq 설치 (YAML 수정을 위한 강력한 도구)
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq
          
          # 3. 배포 파일의 이미지 태그 수정
          DEPLOYMENT_FILE="./clusters/my-cluster/apps/${{ matrix.app }}.yaml"
          NEW_IMAGE="ghcr.io/${{ github.repository_owner }}/personal_project/${{ matrix.app }}:${IMAGE_TAG}"
          yq -i '(select(.kind == "Deployment") | .spec.template.spec.containers[0].image) = "'${NEW_IMAGE}'"' $DEPLOYMENT_FILE
          
          # 4. 변경사항 커밋 및 푸시
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add $DEPLOYMENT_FILE
          git commit -m "ci: Update ${{ matrix.app }} image to tag ${IMAGE_TAG}"
          git push

